'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.296
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("LIQUIDACIONES_PFISDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class LIQUIDACIONES_PFISDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableDEBITOS As DEBITOSDataTable
    
    Private tableSP_SELECCIONAR_ANEXOLIQUIDACIONES As SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable
    
    Private tableSP_OBTENER_DETALLE_DEBITO As SP_OBTENER_DETALLE_DEBITODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DEBITOS")) Is Nothing) Then
                MyBase.Tables.Add(New DEBITOSDataTable(ds.Tables("DEBITOS")))
            End If
            If (Not (ds.Tables("SP_SELECCIONAR_ANEXOLIQUIDACIONES")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable(ds.Tables("SP_SELECCIONAR_ANEXOLIQUIDACIONES")))
            End If
            If (Not (ds.Tables("SP_OBTENER_DETALLE_DEBITO")) Is Nothing) Then
                MyBase.Tables.Add(New SP_OBTENER_DETALLE_DEBITODataTable(ds.Tables("SP_OBTENER_DETALLE_DEBITO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DEBITOS() As DEBITOSDataTable
        Get
            Return Me.tableDEBITOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_SELECCIONAR_ANEXOLIQUIDACIONES() As SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable
        Get
            Return Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_OBTENER_DETALLE_DEBITO() As SP_OBTENER_DETALLE_DEBITODataTable
        Get
            Return Me.tableSP_OBTENER_DETALLE_DEBITO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As LIQUIDACIONES_PFISDataSet = CType(MyBase.Clone,LIQUIDACIONES_PFISDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("DEBITOS")) Is Nothing) Then
                MyBase.Tables.Add(New DEBITOSDataTable(ds.Tables("DEBITOS")))
            End If
            If (Not (ds.Tables("SP_SELECCIONAR_ANEXOLIQUIDACIONES")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable(ds.Tables("SP_SELECCIONAR_ANEXOLIQUIDACIONES")))
            End If
            If (Not (ds.Tables("SP_OBTENER_DETALLE_DEBITO")) Is Nothing) Then
                MyBase.Tables.Add(New SP_OBTENER_DETALLE_DEBITODataTable(ds.Tables("SP_OBTENER_DETALLE_DEBITO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDEBITOS = CType(MyBase.Tables("DEBITOS"),DEBITOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDEBITOS) Is Nothing) Then
                Me.tableDEBITOS.InitVars
            End If
        End If
        Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES = CType(MyBase.Tables("SP_SELECCIONAR_ANEXOLIQUIDACIONES"),SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES) Is Nothing) Then
                Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.InitVars
            End If
        End If
        Me.tableSP_OBTENER_DETALLE_DEBITO = CType(MyBase.Tables("SP_OBTENER_DETALLE_DEBITO"),SP_OBTENER_DETALLE_DEBITODataTable)
        If (initTable = true) Then
            If (Not (Me.tableSP_OBTENER_DETALLE_DEBITO) Is Nothing) Then
                Me.tableSP_OBTENER_DETALLE_DEBITO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "LIQUIDACIONES_PFISDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/LIQUIDACIONES_PFISDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDEBITOS = New DEBITOSDataTable()
        MyBase.Tables.Add(Me.tableDEBITOS)
        Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES = New SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable()
        MyBase.Tables.Add(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES)
        Me.tableSP_OBTENER_DETALLE_DEBITO = New SP_OBTENER_DETALLE_DEBITODataTable()
        MyBase.Tables.Add(Me.tableSP_OBTENER_DETALLE_DEBITO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDEBITOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSP_SELECCIONAR_ANEXOLIQUIDACIONES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSP_OBTENER_DETALLE_DEBITO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As LIQUIDACIONES_PFISDataSet = New LIQUIDACIONES_PFISDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DEBITOSRowChangeEventHandler(ByVal sender As Object, ByVal e As DEBITOSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEventHandler(ByVal sender As Object, ByVal e As SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SP_OBTENER_DETALLE_DEBITORowChangeEventHandler(ByVal sender As Object, ByVal e As SP_OBTENER_DETALLE_DEBITORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DEBITOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of DEBITOSRow)
        
        Private columnDEB_ID As Global.System.Data.DataColumn
        
        Private columnDEB_NUMERO As Global.System.Data.DataColumn
        
        Private columnDEB_LIQUIDACION As Global.System.Data.DataColumn
        
        Private columnDEB_CUIT As Global.System.Data.DataColumn
        
        Private columnDEB_SUCURSAL As Global.System.Data.DataColumn
        
        Private columnDEB_FACTURA As Global.System.Data.DataColumn
        
        Private columnDEB_BENEFICIO As Global.System.Data.DataColumn
        
        Private columnDEB_NOMBRE As Global.System.Data.DataColumn
        
        Private columnDEB_PRESTACION As Global.System.Data.DataColumn
        
        Private columnDEB_PERIODO As Global.System.Data.DataColumn
        
        Private columnDEB_DEBITO As Global.System.Data.DataColumn
        
        Private columnDEB_MONTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DEBITOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_LIQUIDACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_LIQUIDACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_CUITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_CUIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_SUCURSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_SUCURSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_FACTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_FACTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_BENEFICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_BENEFICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_PRESTACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_PRESTACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_PERIODOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_PERIODO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_DEBITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_DEBITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_MONTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_MONTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DEBITOSRow
            Get
                Return CType(Me.Rows(index),DEBITOSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEBITOSRowChanging As DEBITOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEBITOSRowChanged As DEBITOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEBITOSRowDeleting As DEBITOSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEBITOSRowDeleted As DEBITOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDEBITOSRow(ByVal row As DEBITOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDEBITOSRow(ByVal DEB_NUMERO As Integer, ByVal DEB_LIQUIDACION As Integer, ByVal DEB_CUIT As String, ByVal DEB_SUCURSAL As String, ByVal DEB_FACTURA As String, ByVal DEB_BENEFICIO As String, ByVal DEB_NOMBRE As String, ByVal DEB_PRESTACION As String, ByVal DEB_PERIODO As String, ByVal DEB_DEBITO As Byte, ByVal DEB_MONTO As Decimal) As DEBITOSRow
            Dim rowDEBITOSRow As DEBITOSRow = CType(Me.NewRow,DEBITOSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DEB_NUMERO, DEB_LIQUIDACION, DEB_CUIT, DEB_SUCURSAL, DEB_FACTURA, DEB_BENEFICIO, DEB_NOMBRE, DEB_PRESTACION, DEB_PERIODO, DEB_DEBITO, DEB_MONTO}
            rowDEBITOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDEBITOSRow)
            Return rowDEBITOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByDEB_NUMERODEB_BENEFICIODEB_PRESTACION(ByVal DEB_NUMERO As Integer, ByVal DEB_BENEFICIO As String, ByVal DEB_PRESTACION As String) As DEBITOSRow
            Return CType(Me.Rows.Find(New Object() {DEB_NUMERO, DEB_BENEFICIO, DEB_PRESTACION}),DEBITOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DEBITOSDataTable = CType(MyBase.Clone,DEBITOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DEBITOSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDEB_ID = MyBase.Columns("DEB_ID")
            Me.columnDEB_NUMERO = MyBase.Columns("DEB_NUMERO")
            Me.columnDEB_LIQUIDACION = MyBase.Columns("DEB_LIQUIDACION")
            Me.columnDEB_CUIT = MyBase.Columns("DEB_CUIT")
            Me.columnDEB_SUCURSAL = MyBase.Columns("DEB_SUCURSAL")
            Me.columnDEB_FACTURA = MyBase.Columns("DEB_FACTURA")
            Me.columnDEB_BENEFICIO = MyBase.Columns("DEB_BENEFICIO")
            Me.columnDEB_NOMBRE = MyBase.Columns("DEB_NOMBRE")
            Me.columnDEB_PRESTACION = MyBase.Columns("DEB_PRESTACION")
            Me.columnDEB_PERIODO = MyBase.Columns("DEB_PERIODO")
            Me.columnDEB_DEBITO = MyBase.Columns("DEB_DEBITO")
            Me.columnDEB_MONTO = MyBase.Columns("DEB_MONTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDEB_ID = New Global.System.Data.DataColumn("DEB_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_ID)
            Me.columnDEB_NUMERO = New Global.System.Data.DataColumn("DEB_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_NUMERO)
            Me.columnDEB_LIQUIDACION = New Global.System.Data.DataColumn("DEB_LIQUIDACION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_LIQUIDACION)
            Me.columnDEB_CUIT = New Global.System.Data.DataColumn("DEB_CUIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_CUIT)
            Me.columnDEB_SUCURSAL = New Global.System.Data.DataColumn("DEB_SUCURSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_SUCURSAL)
            Me.columnDEB_FACTURA = New Global.System.Data.DataColumn("DEB_FACTURA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_FACTURA)
            Me.columnDEB_BENEFICIO = New Global.System.Data.DataColumn("DEB_BENEFICIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_BENEFICIO)
            Me.columnDEB_NOMBRE = New Global.System.Data.DataColumn("DEB_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_NOMBRE)
            Me.columnDEB_PRESTACION = New Global.System.Data.DataColumn("DEB_PRESTACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_PRESTACION)
            Me.columnDEB_PERIODO = New Global.System.Data.DataColumn("DEB_PERIODO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_PERIODO)
            Me.columnDEB_DEBITO = New Global.System.Data.DataColumn("DEB_DEBITO", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_DEBITO)
            Me.columnDEB_MONTO = New Global.System.Data.DataColumn("DEB_MONTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_MONTO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDEB_NUMERO, Me.columnDEB_BENEFICIO, Me.columnDEB_PRESTACION}, true))
            Me.columnDEB_ID.AutoIncrement = true
            Me.columnDEB_ID.AutoIncrementSeed = -1
            Me.columnDEB_ID.AutoIncrementStep = -1
            Me.columnDEB_ID.AllowDBNull = false
            Me.columnDEB_ID.ReadOnly = true
            Me.columnDEB_NUMERO.AllowDBNull = false
            Me.columnDEB_LIQUIDACION.AllowDBNull = false
            Me.columnDEB_CUIT.AllowDBNull = false
            Me.columnDEB_CUIT.MaxLength = 11
            Me.columnDEB_SUCURSAL.AllowDBNull = false
            Me.columnDEB_SUCURSAL.MaxLength = 4
            Me.columnDEB_FACTURA.AllowDBNull = false
            Me.columnDEB_FACTURA.MaxLength = 13
            Me.columnDEB_BENEFICIO.AllowDBNull = false
            Me.columnDEB_BENEFICIO.MaxLength = 14
            Me.columnDEB_NOMBRE.AllowDBNull = false
            Me.columnDEB_NOMBRE.MaxLength = 50
            Me.columnDEB_PRESTACION.AllowDBNull = false
            Me.columnDEB_PRESTACION.MaxLength = 50
            Me.columnDEB_PERIODO.AllowDBNull = false
            Me.columnDEB_PERIODO.MaxLength = 6
            Me.columnDEB_DEBITO.AllowDBNull = false
            Me.columnDEB_MONTO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDEBITOSRow() As DEBITOSRow
            Return CType(Me.NewRow,DEBITOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DEBITOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DEBITOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DEBITOSRowChangedEvent) Is Nothing) Then
                RaiseEvent DEBITOSRowChanged(Me, New DEBITOSRowChangeEvent(CType(e.Row,DEBITOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DEBITOSRowChangingEvent) Is Nothing) Then
                RaiseEvent DEBITOSRowChanging(Me, New DEBITOSRowChangeEvent(CType(e.Row,DEBITOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DEBITOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent DEBITOSRowDeleted(Me, New DEBITOSRowChangeEvent(CType(e.Row,DEBITOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DEBITOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent DEBITOSRowDeleting(Me, New DEBITOSRowChangeEvent(CType(e.Row,DEBITOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDEBITOSRow(ByVal row As DEBITOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As LIQUIDACIONES_PFISDataSet = New LIQUIDACIONES_PFISDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DEBITOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable
        Inherits Global.System.Data.TypedTableBase(Of SP_SELECCIONAR_ANEXOLIQUIDACIONESRow)
        
        Private columnANX_NUMLIQ As Global.System.Data.DataColumn
        
        Private columnANX_NUMEROLIQUIDACION As Global.System.Data.DataColumn
        
        Private columnANX_CUIT As Global.System.Data.DataColumn
        
        Private columnANX_RAZONSOCIAL As Global.System.Data.DataColumn
        
        Private columnANX_PERIODO As Global.System.Data.DataColumn
        
        Private columnANX_TIPOFACTURA As Global.System.Data.DataColumn
        
        Private columnANX_NUMEROFACTURA As Global.System.Data.DataColumn
        
        Private columnANX_MODULO As Global.System.Data.DataColumn
        
        Private columnANX_IMPORTEFACTURADO As Global.System.Data.DataColumn
        
        Private columnAUX_NUMERODEBITO As Global.System.Data.DataColumn
        
        Private columnANX_IMPORTEDEBITO As Global.System.Data.DataColumn
        
        Private columnANX_NUMEROBAFC As Global.System.Data.DataColumn
        
        Private columnANX_IMPORTEBAFC As Global.System.Data.DataColumn
        
        Private columnANX_IMPORTELIQUIDADO As Global.System.Data.DataColumn
        
        Private columnANX_LEYENDAIMPORTELIQUIDADO As Global.System.Data.DataColumn
        
        Private columnANX_LIQUIDADOALFONDO As Global.System.Data.DataColumn
        
        Private columnANX_OBSERVACIONES As Global.System.Data.DataColumn
        
        Private columnANX_FECHALIQUIDACION As Global.System.Data.DataColumn
        
        Private columnANX_EXPEDIENTE As Global.System.Data.DataColumn
        
        Private columnANX_REFERENCIA As Global.System.Data.DataColumn
        
        Private columnANX_USUARIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SP_SELECCIONAR_ANEXOLIQUIDACIONES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_NUMLIQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_NUMLIQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_NUMEROLIQUIDACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_NUMEROLIQUIDACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_CUITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_CUIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_RAZONSOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_RAZONSOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_PERIODOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_PERIODO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_TIPOFACTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_TIPOFACTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_NUMEROFACTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_NUMEROFACTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_MODULOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_MODULO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_IMPORTEFACTURADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_IMPORTEFACTURADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AUX_NUMERODEBITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUX_NUMERODEBITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_IMPORTEDEBITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_IMPORTEDEBITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_NUMEROBAFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_NUMEROBAFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_IMPORTEBAFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_IMPORTEBAFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_IMPORTELIQUIDADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_IMPORTELIQUIDADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_LEYENDAIMPORTELIQUIDADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_LEYENDAIMPORTELIQUIDADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_LIQUIDADOALFONDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_LIQUIDADOALFONDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_OBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_FECHALIQUIDACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_FECHALIQUIDACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_EXPEDIENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_EXPEDIENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_REFERENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_REFERENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ANX_USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANX_USUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow
            Get
                Return CType(Me.Rows(index),SP_SELECCIONAR_ANEXOLIQUIDACIONESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChanging As SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChanged As SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SP_SELECCIONAR_ANEXOLIQUIDACIONESRowDeleting As SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SP_SELECCIONAR_ANEXOLIQUIDACIONESRowDeleted As SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSP_SELECCIONAR_ANEXOLIQUIDACIONESRow(ByVal row As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSP_SELECCIONAR_ANEXOLIQUIDACIONESRow( _
                    ByVal ANX_NUMLIQ As Integer,  _
                    ByVal ANX_NUMEROLIQUIDACION As String,  _
                    ByVal ANX_CUIT As String,  _
                    ByVal ANX_RAZONSOCIAL As String,  _
                    ByVal ANX_PERIODO As String,  _
                    ByVal ANX_TIPOFACTURA As String,  _
                    ByVal ANX_NUMEROFACTURA As String,  _
                    ByVal ANX_MODULO As String,  _
                    ByVal ANX_IMPORTEFACTURADO As Decimal,  _
                    ByVal AUX_NUMERODEBITO As String,  _
                    ByVal ANX_IMPORTEDEBITO As Decimal,  _
                    ByVal ANX_NUMEROBAFC As String,  _
                    ByVal ANX_IMPORTEBAFC As Decimal,  _
                    ByVal ANX_IMPORTELIQUIDADO As Decimal,  _
                    ByVal ANX_LEYENDAIMPORTELIQUIDADO As String,  _
                    ByVal ANX_LIQUIDADOALFONDO As String,  _
                    ByVal ANX_OBSERVACIONES As String,  _
                    ByVal ANX_FECHALIQUIDACION As String,  _
                    ByVal ANX_EXPEDIENTE As String,  _
                    ByVal ANX_REFERENCIA As String,  _
                    ByVal ANX_USUARIO As String) As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow
            Dim rowSP_SELECCIONAR_ANEXOLIQUIDACIONESRow As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow = CType(Me.NewRow,SP_SELECCIONAR_ANEXOLIQUIDACIONESRow)
            Dim columnValuesArray() As Object = New Object() {ANX_NUMLIQ, ANX_NUMEROLIQUIDACION, ANX_CUIT, ANX_RAZONSOCIAL, ANX_PERIODO, ANX_TIPOFACTURA, ANX_NUMEROFACTURA, ANX_MODULO, ANX_IMPORTEFACTURADO, AUX_NUMERODEBITO, ANX_IMPORTEDEBITO, ANX_NUMEROBAFC, ANX_IMPORTEBAFC, ANX_IMPORTELIQUIDADO, ANX_LEYENDAIMPORTELIQUIDADO, ANX_LIQUIDADOALFONDO, ANX_OBSERVACIONES, ANX_FECHALIQUIDACION, ANX_EXPEDIENTE, ANX_REFERENCIA, ANX_USUARIO}
            rowSP_SELECCIONAR_ANEXOLIQUIDACIONESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSP_SELECCIONAR_ANEXOLIQUIDACIONESRow)
            Return rowSP_SELECCIONAR_ANEXOLIQUIDACIONESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByANX_NUMLIQ(ByVal ANX_NUMLIQ As Integer) As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow
            Return CType(Me.Rows.Find(New Object() {ANX_NUMLIQ}),SP_SELECCIONAR_ANEXOLIQUIDACIONESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable = CType(MyBase.Clone,SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnANX_NUMLIQ = MyBase.Columns("ANX_NUMLIQ")
            Me.columnANX_NUMEROLIQUIDACION = MyBase.Columns("ANX_NUMEROLIQUIDACION")
            Me.columnANX_CUIT = MyBase.Columns("ANX_CUIT")
            Me.columnANX_RAZONSOCIAL = MyBase.Columns("ANX_RAZONSOCIAL")
            Me.columnANX_PERIODO = MyBase.Columns("ANX_PERIODO")
            Me.columnANX_TIPOFACTURA = MyBase.Columns("ANX_TIPOFACTURA")
            Me.columnANX_NUMEROFACTURA = MyBase.Columns("ANX_NUMEROFACTURA")
            Me.columnANX_MODULO = MyBase.Columns("ANX_MODULO")
            Me.columnANX_IMPORTEFACTURADO = MyBase.Columns("ANX_IMPORTEFACTURADO")
            Me.columnAUX_NUMERODEBITO = MyBase.Columns("AUX_NUMERODEBITO")
            Me.columnANX_IMPORTEDEBITO = MyBase.Columns("ANX_IMPORTEDEBITO")
            Me.columnANX_NUMEROBAFC = MyBase.Columns("ANX_NUMEROBAFC")
            Me.columnANX_IMPORTEBAFC = MyBase.Columns("ANX_IMPORTEBAFC")
            Me.columnANX_IMPORTELIQUIDADO = MyBase.Columns("ANX_IMPORTELIQUIDADO")
            Me.columnANX_LEYENDAIMPORTELIQUIDADO = MyBase.Columns("ANX_LEYENDAIMPORTELIQUIDADO")
            Me.columnANX_LIQUIDADOALFONDO = MyBase.Columns("ANX_LIQUIDADOALFONDO")
            Me.columnANX_OBSERVACIONES = MyBase.Columns("ANX_OBSERVACIONES")
            Me.columnANX_FECHALIQUIDACION = MyBase.Columns("ANX_FECHALIQUIDACION")
            Me.columnANX_EXPEDIENTE = MyBase.Columns("ANX_EXPEDIENTE")
            Me.columnANX_REFERENCIA = MyBase.Columns("ANX_REFERENCIA")
            Me.columnANX_USUARIO = MyBase.Columns("ANX_USUARIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnANX_NUMLIQ = New Global.System.Data.DataColumn("ANX_NUMLIQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_NUMLIQ)
            Me.columnANX_NUMEROLIQUIDACION = New Global.System.Data.DataColumn("ANX_NUMEROLIQUIDACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_NUMEROLIQUIDACION)
            Me.columnANX_CUIT = New Global.System.Data.DataColumn("ANX_CUIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_CUIT)
            Me.columnANX_RAZONSOCIAL = New Global.System.Data.DataColumn("ANX_RAZONSOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_RAZONSOCIAL)
            Me.columnANX_PERIODO = New Global.System.Data.DataColumn("ANX_PERIODO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_PERIODO)
            Me.columnANX_TIPOFACTURA = New Global.System.Data.DataColumn("ANX_TIPOFACTURA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_TIPOFACTURA)
            Me.columnANX_NUMEROFACTURA = New Global.System.Data.DataColumn("ANX_NUMEROFACTURA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_NUMEROFACTURA)
            Me.columnANX_MODULO = New Global.System.Data.DataColumn("ANX_MODULO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_MODULO)
            Me.columnANX_IMPORTEFACTURADO = New Global.System.Data.DataColumn("ANX_IMPORTEFACTURADO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_IMPORTEFACTURADO)
            Me.columnAUX_NUMERODEBITO = New Global.System.Data.DataColumn("AUX_NUMERODEBITO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUX_NUMERODEBITO)
            Me.columnANX_IMPORTEDEBITO = New Global.System.Data.DataColumn("ANX_IMPORTEDEBITO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_IMPORTEDEBITO)
            Me.columnANX_NUMEROBAFC = New Global.System.Data.DataColumn("ANX_NUMEROBAFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_NUMEROBAFC)
            Me.columnANX_IMPORTEBAFC = New Global.System.Data.DataColumn("ANX_IMPORTEBAFC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_IMPORTEBAFC)
            Me.columnANX_IMPORTELIQUIDADO = New Global.System.Data.DataColumn("ANX_IMPORTELIQUIDADO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_IMPORTELIQUIDADO)
            Me.columnANX_LEYENDAIMPORTELIQUIDADO = New Global.System.Data.DataColumn("ANX_LEYENDAIMPORTELIQUIDADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_LEYENDAIMPORTELIQUIDADO)
            Me.columnANX_LIQUIDADOALFONDO = New Global.System.Data.DataColumn("ANX_LIQUIDADOALFONDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_LIQUIDADOALFONDO)
            Me.columnANX_OBSERVACIONES = New Global.System.Data.DataColumn("ANX_OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_OBSERVACIONES)
            Me.columnANX_FECHALIQUIDACION = New Global.System.Data.DataColumn("ANX_FECHALIQUIDACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_FECHALIQUIDACION)
            Me.columnANX_EXPEDIENTE = New Global.System.Data.DataColumn("ANX_EXPEDIENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_EXPEDIENTE)
            Me.columnANX_REFERENCIA = New Global.System.Data.DataColumn("ANX_REFERENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_REFERENCIA)
            Me.columnANX_USUARIO = New Global.System.Data.DataColumn("ANX_USUARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANX_USUARIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnANX_NUMLIQ}, true))
            Me.columnANX_NUMLIQ.AllowDBNull = false
            Me.columnANX_NUMLIQ.Unique = true
            Me.columnANX_NUMEROLIQUIDACION.MaxLength = 20
            Me.columnANX_CUIT.MaxLength = 14
            Me.columnANX_RAZONSOCIAL.MaxLength = 50
            Me.columnANX_PERIODO.MaxLength = 20
            Me.columnANX_TIPOFACTURA.MaxLength = 20
            Me.columnANX_NUMEROFACTURA.MaxLength = 13
            Me.columnANX_MODULO.MaxLength = 50
            Me.columnAUX_NUMERODEBITO.MaxLength = 10
            Me.columnANX_NUMEROBAFC.MaxLength = 10
            Me.columnANX_LEYENDAIMPORTELIQUIDADO.MaxLength = 100
            Me.columnANX_LIQUIDADOALFONDO.MaxLength = 100
            Me.columnANX_OBSERVACIONES.MaxLength = 200
            Me.columnANX_FECHALIQUIDACION.MaxLength = 50
            Me.columnANX_EXPEDIENTE.MaxLength = 25
            Me.columnANX_REFERENCIA.MaxLength = 30
            Me.columnANX_USUARIO.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSP_SELECCIONAR_ANEXOLIQUIDACIONESRow() As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow
            Return CType(Me.NewRow,SP_SELECCIONAR_ANEXOLIQUIDACIONESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SP_SELECCIONAR_ANEXOLIQUIDACIONESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SP_SELECCIONAR_ANEXOLIQUIDACIONESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangedEvent) Is Nothing) Then
                RaiseEvent SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChanged(Me, New SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEvent(CType(e.Row,SP_SELECCIONAR_ANEXOLIQUIDACIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangingEvent) Is Nothing) Then
                RaiseEvent SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChanging(Me, New SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEvent(CType(e.Row,SP_SELECCIONAR_ANEXOLIQUIDACIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_SELECCIONAR_ANEXOLIQUIDACIONESRowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_SELECCIONAR_ANEXOLIQUIDACIONESRowDeleted(Me, New SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEvent(CType(e.Row,SP_SELECCIONAR_ANEXOLIQUIDACIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_SELECCIONAR_ANEXOLIQUIDACIONESRowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_SELECCIONAR_ANEXOLIQUIDACIONESRowDeleting(Me, New SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEvent(CType(e.Row,SP_SELECCIONAR_ANEXOLIQUIDACIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSP_SELECCIONAR_ANEXOLIQUIDACIONESRow(ByVal row As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As LIQUIDACIONES_PFISDataSet = New LIQUIDACIONES_PFISDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SP_OBTENER_DETALLE_DEBITODataTable
        Inherits Global.System.Data.TypedTableBase(Of SP_OBTENER_DETALLE_DEBITORow)
        
        Private columnDEB_NUMERO As Global.System.Data.DataColumn
        
        Private columnDEB_BENEFICIO As Global.System.Data.DataColumn
        
        Private columnDEB_NOMBRE As Global.System.Data.DataColumn
        
        Private columnDEB_DESCRIPCION As Global.System.Data.DataColumn
        
        Private columnDEB_MONTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SP_OBTENER_DETALLE_DEBITO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_BENEFICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_BENEFICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_DESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEB_MONTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEB_MONTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_OBTENER_DETALLE_DEBITORow
            Get
                Return CType(Me.Rows(index),SP_OBTENER_DETALLE_DEBITORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SP_OBTENER_DETALLE_DEBITORowChanging As SP_OBTENER_DETALLE_DEBITORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SP_OBTENER_DETALLE_DEBITORowChanged As SP_OBTENER_DETALLE_DEBITORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SP_OBTENER_DETALLE_DEBITORowDeleting As SP_OBTENER_DETALLE_DEBITORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SP_OBTENER_DETALLE_DEBITORowDeleted As SP_OBTENER_DETALLE_DEBITORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSP_OBTENER_DETALLE_DEBITORow(ByVal row As SP_OBTENER_DETALLE_DEBITORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSP_OBTENER_DETALLE_DEBITORow(ByVal DEB_NUMERO As Integer, ByVal DEB_BENEFICIO As String, ByVal DEB_NOMBRE As String, ByVal DEB_DESCRIPCION As String, ByVal DEB_MONTO As Decimal) As SP_OBTENER_DETALLE_DEBITORow
            Dim rowSP_OBTENER_DETALLE_DEBITORow As SP_OBTENER_DETALLE_DEBITORow = CType(Me.NewRow,SP_OBTENER_DETALLE_DEBITORow)
            Dim columnValuesArray() As Object = New Object() {DEB_NUMERO, DEB_BENEFICIO, DEB_NOMBRE, DEB_DESCRIPCION, DEB_MONTO}
            rowSP_OBTENER_DETALLE_DEBITORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSP_OBTENER_DETALLE_DEBITORow)
            Return rowSP_OBTENER_DETALLE_DEBITORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SP_OBTENER_DETALLE_DEBITODataTable = CType(MyBase.Clone,SP_OBTENER_DETALLE_DEBITODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SP_OBTENER_DETALLE_DEBITODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDEB_NUMERO = MyBase.Columns("DEB_NUMERO")
            Me.columnDEB_BENEFICIO = MyBase.Columns("DEB_BENEFICIO")
            Me.columnDEB_NOMBRE = MyBase.Columns("DEB_NOMBRE")
            Me.columnDEB_DESCRIPCION = MyBase.Columns("DEB_DESCRIPCION")
            Me.columnDEB_MONTO = MyBase.Columns("DEB_MONTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDEB_NUMERO = New Global.System.Data.DataColumn("DEB_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_NUMERO)
            Me.columnDEB_BENEFICIO = New Global.System.Data.DataColumn("DEB_BENEFICIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_BENEFICIO)
            Me.columnDEB_NOMBRE = New Global.System.Data.DataColumn("DEB_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_NOMBRE)
            Me.columnDEB_DESCRIPCION = New Global.System.Data.DataColumn("DEB_DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_DESCRIPCION)
            Me.columnDEB_MONTO = New Global.System.Data.DataColumn("DEB_MONTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEB_MONTO)
            Me.columnDEB_NUMERO.AllowDBNull = false
            Me.columnDEB_BENEFICIO.AllowDBNull = false
            Me.columnDEB_BENEFICIO.MaxLength = 14
            Me.columnDEB_NOMBRE.AllowDBNull = false
            Me.columnDEB_NOMBRE.MaxLength = 50
            Me.columnDEB_DESCRIPCION.AllowDBNull = false
            Me.columnDEB_DESCRIPCION.MaxLength = 38
            Me.columnDEB_MONTO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSP_OBTENER_DETALLE_DEBITORow() As SP_OBTENER_DETALLE_DEBITORow
            Return CType(Me.NewRow,SP_OBTENER_DETALLE_DEBITORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SP_OBTENER_DETALLE_DEBITORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SP_OBTENER_DETALLE_DEBITORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_OBTENER_DETALLE_DEBITORowChangedEvent) Is Nothing) Then
                RaiseEvent SP_OBTENER_DETALLE_DEBITORowChanged(Me, New SP_OBTENER_DETALLE_DEBITORowChangeEvent(CType(e.Row,SP_OBTENER_DETALLE_DEBITORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_OBTENER_DETALLE_DEBITORowChangingEvent) Is Nothing) Then
                RaiseEvent SP_OBTENER_DETALLE_DEBITORowChanging(Me, New SP_OBTENER_DETALLE_DEBITORowChangeEvent(CType(e.Row,SP_OBTENER_DETALLE_DEBITORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_OBTENER_DETALLE_DEBITORowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_OBTENER_DETALLE_DEBITORowDeleted(Me, New SP_OBTENER_DETALLE_DEBITORowChangeEvent(CType(e.Row,SP_OBTENER_DETALLE_DEBITORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_OBTENER_DETALLE_DEBITORowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_OBTENER_DETALLE_DEBITORowDeleting(Me, New SP_OBTENER_DETALLE_DEBITORowChangeEvent(CType(e.Row,SP_OBTENER_DETALLE_DEBITORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSP_OBTENER_DETALLE_DEBITORow(ByVal row As SP_OBTENER_DETALLE_DEBITORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As LIQUIDACIONES_PFISDataSet = New LIQUIDACIONES_PFISDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SP_OBTENER_DETALLE_DEBITODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DEBITOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableDEBITOS As DEBITOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDEBITOS = CType(Me.Table,DEBITOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_ID() As Integer
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_LIQUIDACION() As Integer
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_LIQUIDACIONColumn),Integer)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_LIQUIDACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_CUIT() As String
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_CUITColumn),String)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_CUITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_SUCURSAL() As String
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_SUCURSALColumn),String)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_SUCURSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_FACTURA() As String
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_FACTURAColumn),String)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_FACTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_BENEFICIO() As String
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_BENEFICIOColumn),String)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_BENEFICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_NOMBRE() As String
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_PRESTACION() As String
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_PRESTACIONColumn),String)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_PRESTACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_PERIODO() As String
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_PERIODOColumn),String)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_PERIODOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_DEBITO() As Byte
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_DEBITOColumn),Byte)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_DEBITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_MONTO() As Decimal
            Get
                Return CType(Me(Me.tableDEBITOS.DEB_MONTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableDEBITOS.DEB_MONTOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SP_SELECCIONAR_ANEXOLIQUIDACIONESRow
        Inherits Global.System.Data.DataRow
        
        Private tableSP_SELECCIONAR_ANEXOLIQUIDACIONES As SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES = CType(Me.Table,SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_NUMLIQ() As Integer
            Get
                Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMLIQColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMLIQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_NUMEROLIQUIDACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROLIQUIDACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_NUMEROLIQUIDACION' in table 'SP_SELECCIONAR_ANEXOLIQUID"& _ 
                            "ACIONES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROLIQUIDACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_CUIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_CUITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_CUIT' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONES' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_CUITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_RAZONSOCIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_RAZONSOCIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_RAZONSOCIAL' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONE"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_RAZONSOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_PERIODO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_PERIODOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_PERIODO' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONES' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_PERIODOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_TIPOFACTURA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_TIPOFACTURAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_TIPOFACTURA' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONE"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_TIPOFACTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_NUMEROFACTURA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROFACTURAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_NUMEROFACTURA' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIO"& _ 
                            "NES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROFACTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_MODULO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_MODULOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_MODULO' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONES' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_MODULOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_IMPORTEFACTURADO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEFACTURADOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_IMPORTEFACTURADO' in table 'SP_SELECCIONAR_ANEXOLIQUIDA"& _ 
                            "CIONES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEFACTURADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AUX_NUMERODEBITO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.AUX_NUMERODEBITOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AUX_NUMERODEBITO' in table 'SP_SELECCIONAR_ANEXOLIQUIDACION"& _ 
                            "ES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.AUX_NUMERODEBITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_IMPORTEDEBITO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEDEBITOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_IMPORTEDEBITO' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIO"& _ 
                            "NES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEDEBITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_NUMEROBAFC() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROBAFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_NUMEROBAFC' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONES"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROBAFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_IMPORTEBAFC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEBAFCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_IMPORTEBAFC' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONE"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEBAFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_IMPORTELIQUIDADO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTELIQUIDADOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_IMPORTELIQUIDADO' in table 'SP_SELECCIONAR_ANEXOLIQUIDA"& _ 
                            "CIONES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTELIQUIDADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_LEYENDAIMPORTELIQUIDADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_LEYENDAIMPORTELIQUIDADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_LEYENDAIMPORTELIQUIDADO' in table 'SP_SELECCIONAR_ANEXO"& _ 
                            "LIQUIDACIONES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_LEYENDAIMPORTELIQUIDADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_LIQUIDADOALFONDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_LIQUIDADOALFONDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_LIQUIDADOALFONDO' in table 'SP_SELECCIONAR_ANEXOLIQUIDA"& _ 
                            "CIONES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_LIQUIDADOALFONDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_OBSERVACIONES' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIO"& _ 
                            "NES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_FECHALIQUIDACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_FECHALIQUIDACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_FECHALIQUIDACION' in table 'SP_SELECCIONAR_ANEXOLIQUIDA"& _ 
                            "CIONES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_FECHALIQUIDACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_EXPEDIENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_EXPEDIENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_EXPEDIENTE' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONES"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_EXPEDIENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_REFERENCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_REFERENCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_REFERENCIA' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONES"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_REFERENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ANX_USUARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_USUARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANX_USUARIO' in table 'SP_SELECCIONAR_ANEXOLIQUIDACIONES' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_NUMEROLIQUIDACIONNull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROLIQUIDACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_NUMEROLIQUIDACIONNull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROLIQUIDACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_CUITNull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_CUITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_CUITNull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_CUITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_RAZONSOCIALNull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_RAZONSOCIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_RAZONSOCIALNull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_RAZONSOCIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_PERIODONull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_PERIODOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_PERIODONull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_PERIODOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_TIPOFACTURANull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_TIPOFACTURAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_TIPOFACTURANull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_TIPOFACTURAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_NUMEROFACTURANull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROFACTURAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_NUMEROFACTURANull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROFACTURAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_MODULONull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_MODULOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_MODULONull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_MODULOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_IMPORTEFACTURADONull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEFACTURADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_IMPORTEFACTURADONull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEFACTURADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAUX_NUMERODEBITONull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.AUX_NUMERODEBITOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAUX_NUMERODEBITONull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.AUX_NUMERODEBITOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_IMPORTEDEBITONull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEDEBITOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_IMPORTEDEBITONull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEDEBITOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_NUMEROBAFCNull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROBAFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_NUMEROBAFCNull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_NUMEROBAFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_IMPORTEBAFCNull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEBAFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_IMPORTEBAFCNull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTEBAFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_IMPORTELIQUIDADONull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTELIQUIDADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_IMPORTELIQUIDADONull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_IMPORTELIQUIDADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_LEYENDAIMPORTELIQUIDADONull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_LEYENDAIMPORTELIQUIDADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_LEYENDAIMPORTELIQUIDADONull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_LEYENDAIMPORTELIQUIDADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_LIQUIDADOALFONDONull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_LIQUIDADOALFONDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_LIQUIDADOALFONDONull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_LIQUIDADOALFONDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_OBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_OBSERVACIONESNull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_FECHALIQUIDACIONNull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_FECHALIQUIDACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_FECHALIQUIDACIONNull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_FECHALIQUIDACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_EXPEDIENTENull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_EXPEDIENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_EXPEDIENTENull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_EXPEDIENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_REFERENCIANull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_REFERENCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_REFERENCIANull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_REFERENCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANX_USUARIONull() As Boolean
            Return Me.IsNull(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_USUARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANX_USUARIONull()
            Me(Me.tableSP_SELECCIONAR_ANEXOLIQUIDACIONES.ANX_USUARIOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SP_OBTENER_DETALLE_DEBITORow
        Inherits Global.System.Data.DataRow
        
        Private tableSP_OBTENER_DETALLE_DEBITO As SP_OBTENER_DETALLE_DEBITODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_OBTENER_DETALLE_DEBITO = CType(Me.Table,SP_OBTENER_DETALLE_DEBITODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_BENEFICIO() As String
            Get
                Return CType(Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_BENEFICIOColumn),String)
            End Get
            Set
                Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_BENEFICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_NOMBRE() As String
            Get
                Return CType(Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEB_MONTO() As Decimal
            Get
                Return CType(Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_MONTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableSP_OBTENER_DETALLE_DEBITO.DEB_MONTOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DEBITOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DEBITOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DEBITOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DEBITOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SP_SELECCIONAR_ANEXOLIQUIDACIONESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SP_SELECCIONAR_ANEXOLIQUIDACIONESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SP_OBTENER_DETALLE_DEBITORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SP_OBTENER_DETALLE_DEBITORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SP_OBTENER_DETALLE_DEBITORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SP_OBTENER_DETALLE_DEBITORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace LIQUIDACIONES_PFISDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DEBITOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DEBITOS"
            tableMapping.ColumnMappings.Add("DEB_ID", "DEB_ID")
            tableMapping.ColumnMappings.Add("DEB_NUMERO", "DEB_NUMERO")
            tableMapping.ColumnMappings.Add("DEB_LIQUIDACION", "DEB_LIQUIDACION")
            tableMapping.ColumnMappings.Add("DEB_CUIT", "DEB_CUIT")
            tableMapping.ColumnMappings.Add("DEB_SUCURSAL", "DEB_SUCURSAL")
            tableMapping.ColumnMappings.Add("DEB_FACTURA", "DEB_FACTURA")
            tableMapping.ColumnMappings.Add("DEB_BENEFICIO", "DEB_BENEFICIO")
            tableMapping.ColumnMappings.Add("DEB_NOMBRE", "DEB_NOMBRE")
            tableMapping.ColumnMappings.Add("DEB_PRESTACION", "DEB_PRESTACION")
            tableMapping.ColumnMappings.Add("DEB_PERIODO", "DEB_PERIODO")
            tableMapping.ColumnMappings.Add("DEB_DEBITO", "DEB_DEBITO")
            tableMapping.ColumnMappings.Add("DEB_MONTO", "DEB_MONTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DEBITOS] WHERE (([DEB_ID] = @Original_DEB_ID) AND ([DEB_NUMERO"& _ 
                "] = @Original_DEB_NUMERO) AND ([DEB_LIQUIDACION] = @Original_DEB_LIQUIDACION) AN"& _ 
                "D ([DEB_CUIT] = @Original_DEB_CUIT) AND ([DEB_SUCURSAL] = @Original_DEB_SUCURSAL"& _ 
                ") AND ([DEB_FACTURA] = @Original_DEB_FACTURA) AND ([DEB_BENEFICIO] = @Original_D"& _ 
                "EB_BENEFICIO) AND ([DEB_NOMBRE] = @Original_DEB_NOMBRE) AND ([DEB_PRESTACION] = "& _ 
                "@Original_DEB_PRESTACION) AND ([DEB_PERIODO] = @Original_DEB_PERIODO) AND ([DEB_"& _ 
                "DEBITO] = @Original_DEB_DEBITO) AND ([DEB_MONTO] = @Original_DEB_MONTO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_NUMERO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_NUMERO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_LIQUIDACION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_LIQUIDACION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_CUIT", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_CUIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_SUCURSAL", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_FACTURA", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_FACTURA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_BENEFICIO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_BENEFICIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_NOMBRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_NOMBRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_PRESTACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_PRESTACION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_PERIODO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_PERIODO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_DEBITO", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_DEBITO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_MONTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "DEB_MONTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DEBITOS] ([DEB_NUMERO], [DEB_LIQUIDACION], [DEB_CUIT], [DEB_SU"& _ 
                "CURSAL], [DEB_FACTURA], [DEB_BENEFICIO], [DEB_NOMBRE], [DEB_PRESTACION], [DEB_PE"& _ 
                "RIODO], [DEB_DEBITO], [DEB_MONTO]) VALUES (@DEB_NUMERO, @DEB_LIQUIDACION, @DEB_C"& _ 
                "UIT, @DEB_SUCURSAL, @DEB_FACTURA, @DEB_BENEFICIO, @DEB_NOMBRE, @DEB_PRESTACION, "& _ 
                "@DEB_PERIODO, @DEB_DEBITO, @DEB_MONTO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DEB_ID, DEB_NUMERO, DEB_LIQUIDAC"& _ 
                "ION, DEB_CUIT, DEB_SUCURSAL, DEB_FACTURA, DEB_BENEFICIO, DEB_NOMBRE, DEB_PRESTAC"& _ 
                "ION, DEB_PERIODO, DEB_DEBITO, DEB_MONTO FROM DEBITOS WHERE (DEB_BENEFICIO = @DEB"& _ 
                "_BENEFICIO) AND (DEB_NUMERO = @DEB_NUMERO) AND (DEB_PRESTACION = @DEB_PRESTACION"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_NUMERO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_NUMERO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_LIQUIDACION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_LIQUIDACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_CUIT", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_CUIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_SUCURSAL", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_FACTURA", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_BENEFICIO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_BENEFICIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_NOMBRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_PRESTACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_PRESTACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_PERIODO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_PERIODO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_DEBITO", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_DEBITO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_MONTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "DEB_MONTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DEBITOS] SET [DEB_NUMERO] = @DEB_NUMERO, [DEB_LIQUIDACION] = @DEB_L"& _ 
                "IQUIDACION, [DEB_CUIT] = @DEB_CUIT, [DEB_SUCURSAL] = @DEB_SUCURSAL, [DEB_FACTURA"& _ 
                "] = @DEB_FACTURA, [DEB_BENEFICIO] = @DEB_BENEFICIO, [DEB_NOMBRE] = @DEB_NOMBRE, "& _ 
                "[DEB_PRESTACION] = @DEB_PRESTACION, [DEB_PERIODO] = @DEB_PERIODO, [DEB_DEBITO] ="& _ 
                " @DEB_DEBITO, [DEB_MONTO] = @DEB_MONTO WHERE (([DEB_ID] = @Original_DEB_ID) AND "& _ 
                "([DEB_NUMERO] = @Original_DEB_NUMERO) AND ([DEB_LIQUIDACION] = @Original_DEB_LIQ"& _ 
                "UIDACION) AND ([DEB_CUIT] = @Original_DEB_CUIT) AND ([DEB_SUCURSAL] = @Original_"& _ 
                "DEB_SUCURSAL) AND ([DEB_FACTURA] = @Original_DEB_FACTURA) AND ([DEB_BENEFICIO] ="& _ 
                " @Original_DEB_BENEFICIO) AND ([DEB_NOMBRE] = @Original_DEB_NOMBRE) AND ([DEB_PR"& _ 
                "ESTACION] = @Original_DEB_PRESTACION) AND ([DEB_PERIODO] = @Original_DEB_PERIODO"& _ 
                ") AND ([DEB_DEBITO] = @Original_DEB_DEBITO) AND ([DEB_MONTO] = @Original_DEB_MON"& _ 
                "TO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DEB_ID, DEB_NUMERO, DEB_LIQUIDACION, DEB_CUIT, DEB_SUCURSAL, DEB_F"& _ 
                "ACTURA, DEB_BENEFICIO, DEB_NOMBRE, DEB_PRESTACION, DEB_PERIODO, DEB_DEBITO, DEB_"& _ 
                "MONTO FROM DEBITOS WHERE (DEB_BENEFICIO = @DEB_BENEFICIO) AND (DEB_NUMERO = @DEB"& _ 
                "_NUMERO) AND (DEB_PRESTACION = @DEB_PRESTACION)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_NUMERO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_NUMERO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_LIQUIDACION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_LIQUIDACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_CUIT", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_CUIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_SUCURSAL", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_SUCURSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_FACTURA", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_FACTURA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_BENEFICIO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_BENEFICIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_NOMBRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_PRESTACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_PRESTACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_PERIODO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_PERIODO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_DEBITO", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_DEBITO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEB_MONTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "DEB_MONTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_NUMERO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_NUMERO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_LIQUIDACION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_LIQUIDACION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_CUIT", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_CUIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_SUCURSAL", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_SUCURSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_FACTURA", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_FACTURA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_BENEFICIO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_BENEFICIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_NOMBRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_NOMBRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_PRESTACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_PRESTACION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_PERIODO", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_PERIODO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_DEBITO", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEB_DEBITO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEB_MONTO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "DEB_MONTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Modulo_Liquidador.My.MySettings.Default.LIQUIDACIONES_PFISConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DEB_ID, DEB_NUMERO, DEB_LIQUIDACION, DEB_CUIT, DEB_SUCURSAL, DEB_FACTURA, "& _ 
                "DEB_BENEFICIO, DEB_NOMBRE, DEB_PRESTACION, DEB_PERIODO, DEB_DEBITO, DEB_MONTO FR"& _ 
                "OM dbo.DEBITOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LIQUIDACIONES_PFISDataSet.DEBITOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As LIQUIDACIONES_PFISDataSet.DEBITOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As LIQUIDACIONES_PFISDataSet.DEBITOSDataTable = New LIQUIDACIONES_PFISDataSet.DEBITOSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As LIQUIDACIONES_PFISDataSet.DEBITOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As LIQUIDACIONES_PFISDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DEBITOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DEB_ID As Integer, ByVal Original_DEB_NUMERO As Integer, ByVal Original_DEB_LIQUIDACION As Integer, ByVal Original_DEB_CUIT As String, ByVal Original_DEB_SUCURSAL As String, ByVal Original_DEB_FACTURA As String, ByVal Original_DEB_BENEFICIO As String, ByVal Original_DEB_NOMBRE As String, ByVal Original_DEB_PRESTACION As String, ByVal Original_DEB_PERIODO As String, ByVal Original_DEB_DEBITO As Byte, ByVal Original_DEB_MONTO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DEB_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DEB_NUMERO,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DEB_LIQUIDACION,Integer)
            If (Original_DEB_CUIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_CUIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DEB_CUIT,String)
            End If
            If (Original_DEB_SUCURSAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_SUCURSAL")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DEB_SUCURSAL,String)
            End If
            If (Original_DEB_FACTURA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_FACTURA")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DEB_FACTURA,String)
            End If
            If (Original_DEB_BENEFICIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_BENEFICIO")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DEB_BENEFICIO,String)
            End If
            If (Original_DEB_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_DEB_NOMBRE,String)
            End If
            If (Original_DEB_PRESTACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_PRESTACION")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DEB_PRESTACION,String)
            End If
            If (Original_DEB_PERIODO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_PERIODO")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_DEB_PERIODO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_DEB_DEBITO,Byte)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_DEB_MONTO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DEB_NUMERO As Integer, ByVal DEB_LIQUIDACION As Integer, ByVal DEB_CUIT As String, ByVal DEB_SUCURSAL As String, ByVal DEB_FACTURA As String, ByVal DEB_BENEFICIO As String, ByVal DEB_NOMBRE As String, ByVal DEB_PRESTACION As String, ByVal DEB_PERIODO As String, ByVal DEB_DEBITO As Byte, ByVal DEB_MONTO As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(DEB_NUMERO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DEB_LIQUIDACION,Integer)
            If (DEB_CUIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_CUIT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DEB_CUIT,String)
            End If
            If (DEB_SUCURSAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_SUCURSAL")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DEB_SUCURSAL,String)
            End If
            If (DEB_FACTURA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_FACTURA")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DEB_FACTURA,String)
            End If
            If (DEB_BENEFICIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_BENEFICIO")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DEB_BENEFICIO,String)
            End If
            If (DEB_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DEB_NOMBRE,String)
            End If
            If (DEB_PRESTACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_PRESTACION")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DEB_PRESTACION,String)
            End If
            If (DEB_PERIODO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_PERIODO")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DEB_PERIODO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(DEB_DEBITO,Byte)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(DEB_MONTO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DEB_NUMERO As Integer,  _
                    ByVal DEB_LIQUIDACION As Integer,  _
                    ByVal DEB_CUIT As String,  _
                    ByVal DEB_SUCURSAL As String,  _
                    ByVal DEB_FACTURA As String,  _
                    ByVal DEB_BENEFICIO As String,  _
                    ByVal DEB_NOMBRE As String,  _
                    ByVal DEB_PRESTACION As String,  _
                    ByVal DEB_PERIODO As String,  _
                    ByVal DEB_DEBITO As Byte,  _
                    ByVal DEB_MONTO As Decimal,  _
                    ByVal Original_DEB_ID As Integer,  _
                    ByVal Original_DEB_NUMERO As Integer,  _
                    ByVal Original_DEB_LIQUIDACION As Integer,  _
                    ByVal Original_DEB_CUIT As String,  _
                    ByVal Original_DEB_SUCURSAL As String,  _
                    ByVal Original_DEB_FACTURA As String,  _
                    ByVal Original_DEB_BENEFICIO As String,  _
                    ByVal Original_DEB_NOMBRE As String,  _
                    ByVal Original_DEB_PRESTACION As String,  _
                    ByVal Original_DEB_PERIODO As String,  _
                    ByVal Original_DEB_DEBITO As Byte,  _
                    ByVal Original_DEB_MONTO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DEB_NUMERO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DEB_LIQUIDACION,Integer)
            If (DEB_CUIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_CUIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DEB_CUIT,String)
            End If
            If (DEB_SUCURSAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_SUCURSAL")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DEB_SUCURSAL,String)
            End If
            If (DEB_FACTURA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_FACTURA")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DEB_FACTURA,String)
            End If
            If (DEB_BENEFICIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_BENEFICIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DEB_BENEFICIO,String)
            End If
            If (DEB_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DEB_NOMBRE,String)
            End If
            If (DEB_PRESTACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_PRESTACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DEB_PRESTACION,String)
            End If
            If (DEB_PERIODO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEB_PERIODO")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DEB_PERIODO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(DEB_DEBITO,Byte)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(DEB_MONTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DEB_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DEB_NUMERO,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DEB_LIQUIDACION,Integer)
            If (Original_DEB_CUIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_CUIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DEB_CUIT,String)
            End If
            If (Original_DEB_SUCURSAL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_SUCURSAL")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_DEB_SUCURSAL,String)
            End If
            If (Original_DEB_FACTURA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_FACTURA")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_DEB_FACTURA,String)
            End If
            If (Original_DEB_BENEFICIO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_BENEFICIO")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_DEB_BENEFICIO,String)
            End If
            If (Original_DEB_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DEB_NOMBRE,String)
            End If
            If (Original_DEB_PRESTACION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_PRESTACION")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_DEB_PRESTACION,String)
            End If
            If (Original_DEB_PERIODO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEB_PERIODO")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_DEB_PERIODO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_DEB_DEBITO,Byte)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_DEB_MONTO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DEB_LIQUIDACION As Integer,  _
                    ByVal DEB_CUIT As String,  _
                    ByVal DEB_SUCURSAL As String,  _
                    ByVal DEB_FACTURA As String,  _
                    ByVal DEB_NOMBRE As String,  _
                    ByVal DEB_PERIODO As String,  _
                    ByVal DEB_DEBITO As Byte,  _
                    ByVal DEB_MONTO As Decimal,  _
                    ByVal Original_DEB_ID As Integer,  _
                    ByVal Original_DEB_NUMERO As Integer,  _
                    ByVal Original_DEB_LIQUIDACION As Integer,  _
                    ByVal Original_DEB_CUIT As String,  _
                    ByVal Original_DEB_SUCURSAL As String,  _
                    ByVal Original_DEB_FACTURA As String,  _
                    ByVal Original_DEB_BENEFICIO As String,  _
                    ByVal Original_DEB_NOMBRE As String,  _
                    ByVal Original_DEB_PRESTACION As String,  _
                    ByVal Original_DEB_PERIODO As String,  _
                    ByVal Original_DEB_DEBITO As Byte,  _
                    ByVal Original_DEB_MONTO As Decimal) As Integer
            Return Me.Update(Original_DEB_NUMERO, DEB_LIQUIDACION, DEB_CUIT, DEB_SUCURSAL, DEB_FACTURA, Original_DEB_BENEFICIO, DEB_NOMBRE, Original_DEB_PRESTACION, DEB_PERIODO, DEB_DEBITO, DEB_MONTO, Original_DEB_ID, Original_DEB_NUMERO, Original_DEB_LIQUIDACION, Original_DEB_CUIT, Original_DEB_SUCURSAL, Original_DEB_FACTURA, Original_DEB_BENEFICIO, Original_DEB_NOMBRE, Original_DEB_PRESTACION, Original_DEB_PERIODO, Original_DEB_DEBITO, Original_DEB_MONTO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SP_SELECCIONAR_ANEXOLIQUIDACIONESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SP_SELECCIONAR_ANEXOLIQUIDACIONES"
            tableMapping.ColumnMappings.Add("ANX_NUMLIQ", "ANX_NUMLIQ")
            tableMapping.ColumnMappings.Add("ANX_NUMEROLIQUIDACION", "ANX_NUMEROLIQUIDACION")
            tableMapping.ColumnMappings.Add("ANX_CUIT", "ANX_CUIT")
            tableMapping.ColumnMappings.Add("ANX_RAZONSOCIAL", "ANX_RAZONSOCIAL")
            tableMapping.ColumnMappings.Add("ANX_PERIODO", "ANX_PERIODO")
            tableMapping.ColumnMappings.Add("ANX_TIPOFACTURA", "ANX_TIPOFACTURA")
            tableMapping.ColumnMappings.Add("ANX_NUMEROFACTURA", "ANX_NUMEROFACTURA")
            tableMapping.ColumnMappings.Add("ANX_MODULO", "ANX_MODULO")
            tableMapping.ColumnMappings.Add("ANX_IMPORTEFACTURADO", "ANX_IMPORTEFACTURADO")
            tableMapping.ColumnMappings.Add("AUX_NUMERODEBITO", "AUX_NUMERODEBITO")
            tableMapping.ColumnMappings.Add("ANX_IMPORTEDEBITO", "ANX_IMPORTEDEBITO")
            tableMapping.ColumnMappings.Add("ANX_NUMEROBAFC", "ANX_NUMEROBAFC")
            tableMapping.ColumnMappings.Add("ANX_IMPORTEBAFC", "ANX_IMPORTEBAFC")
            tableMapping.ColumnMappings.Add("ANX_IMPORTELIQUIDADO", "ANX_IMPORTELIQUIDADO")
            tableMapping.ColumnMappings.Add("ANX_LEYENDAIMPORTELIQUIDADO", "ANX_LEYENDAIMPORTELIQUIDADO")
            tableMapping.ColumnMappings.Add("ANX_LIQUIDADOALFONDO", "ANX_LIQUIDADOALFONDO")
            tableMapping.ColumnMappings.Add("ANX_OBSERVACIONES", "ANX_OBSERVACIONES")
            tableMapping.ColumnMappings.Add("ANX_FECHALIQUIDACION", "ANX_FECHALIQUIDACION")
            tableMapping.ColumnMappings.Add("ANX_EXPEDIENTE", "ANX_EXPEDIENTE")
            tableMapping.ColumnMappings.Add("ANX_REFERENCIA", "ANX_REFERENCIA")
            tableMapping.ColumnMappings.Add("ANX_USUARIO", "ANX_USUARIO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Modulo_Liquidador.My.MySettings.Default.LIQUIDACIONES_PFISConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.SP_SELECCIONAR_ANEXOLIQUIDACIONES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p_NUMLIQ", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LIQUIDACIONES_PFISDataSet.SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable, ByVal p_NUMLIQ As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (p_NUMLIQ.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(p_NUMLIQ.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal p_NUMLIQ As Global.System.Nullable(Of Integer)) As LIQUIDACIONES_PFISDataSet.SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (p_NUMLIQ.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(p_NUMLIQ.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LIQUIDACIONES_PFISDataSet.SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable = New LIQUIDACIONES_PFISDataSet.SP_SELECCIONAR_ANEXOLIQUIDACIONESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SP_OBTENER_DETALLE_DEBITOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SP_OBTENER_DETALLE_DEBITO"
            tableMapping.ColumnMappings.Add("DEB_NUMERO", "DEB_NUMERO")
            tableMapping.ColumnMappings.Add("DEB_BENEFICIO", "DEB_BENEFICIO")
            tableMapping.ColumnMappings.Add("DEB_NOMBRE", "DEB_NOMBRE")
            tableMapping.ColumnMappings.Add("DEB_DESCRIPCION", "DEB_DESCRIPCION")
            tableMapping.ColumnMappings.Add("DEB_MONTO", "DEB_MONTO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Modulo_Liquidador.My.MySettings.Default.LIQUIDACIONES_PFISConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.SP_OBTENER_DETALLE_DEBITO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p_NUMERO_LIQUIDACION", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LIQUIDACIONES_PFISDataSet.SP_OBTENER_DETALLE_DEBITODataTable, ByVal p_NUMERO_LIQUIDACION As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (p_NUMERO_LIQUIDACION.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(p_NUMERO_LIQUIDACION.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal p_NUMERO_LIQUIDACION As Global.System.Nullable(Of Integer)) As LIQUIDACIONES_PFISDataSet.SP_OBTENER_DETALLE_DEBITODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (p_NUMERO_LIQUIDACION.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(p_NUMERO_LIQUIDACION.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As LIQUIDACIONES_PFISDataSet.SP_OBTENER_DETALLE_DEBITODataTable = New LIQUIDACIONES_PFISDataSet.SP_OBTENER_DETALLE_DEBITODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _dEBITOSTableAdapter As DEBITOSTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DEBITOSTableAdapter() As DEBITOSTableAdapter
            Get
                Return Me._dEBITOSTableAdapter
            End Get
            Set
                Me._dEBITOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._dEBITOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dEBITOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dEBITOSTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._dEBITOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As LIQUIDACIONES_PFISDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dEBITOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DEBITOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dEBITOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As LIQUIDACIONES_PFISDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dEBITOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DEBITOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dEBITOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As LIQUIDACIONES_PFISDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dEBITOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DEBITOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dEBITOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As LIQUIDACIONES_PFISDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._dEBITOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dEBITOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._dEBITOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dEBITOSTableAdapter, Me._dEBITOSTableAdapter.Connection)
                    Me._dEBITOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dEBITOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dEBITOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dEBITOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dEBITOSTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._dEBITOSTableAdapter) Is Nothing) Then
                    Me._dEBITOSTableAdapter.Connection = CType(revertConnections(Me._dEBITOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dEBITOSTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
